call plug#begin('~/.vim/plugged')
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'itchyny/lightline.vim'
Plug 'lingceng/z.vim'
Plug 'martinda/Jenkinsfile-vim-syntax'
Plug 'slim-template/vim-slim'
Plug 'w0rp/ale'
"Plug 'vim-syntastic/syntastic'
Plug 'rust-lang/rust.vim'
Plug 'mrtazz/simplenote.vim', { 'branch': 'allow-token-instead-of-user-pass' }
Plug 'VundleVim/Vundle.vim'
"Plug 'ctrlpvim/ctrlp.vim'
Plug 'elzr/vim-json'
Plug 'flazz/vim-colorschemes'
Plug 'google/styleguide', { 'rtp': 'google_python_style.vm' }
Plug 'heavenshell/vim-pydocstring'
Plug 'honza/vim-snippets'
Plug 'janko-m/vim-test'
Plug 'kchmck/vim-coffee-script'
"Plug 'majutsushi/tagbar'
Plug 'mileszs/ack.vim'
"Plug 'padde/jump.vim'
"Plug 'plasticboy/vim-markdown'
Plug 'reinh/vim-makegreen'
Plug 'rking/ag.vim'
Plug 'tell-k/vim-autopep8'
Plug 'tmhedberg/SimpylFold'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
"Plug 'yssl/autocwd.vim'
Plug 'stephpy/vim-yaml'
Plug 'leafgarland/typescript-vim'
call plug#end()

filetype plugin indent on


" Mappings
let mapleader ="\<Space>"
"nnoremap <Leader>Z :CtrlPClearAllCaches<CR>
nnoremap <Leader>G :Git blame<CR>
nnoremap <Leader>a :Ack 
nnoremap <Leader>c :%y+<CR>
nnoremap <Leader>i oimport pdb<CR>pdb.set_trace()<Esc>j^
nnoremap <Leader>e :vs ~/.vimrc<CR>
nnoremap <Leader>fj :FormatJson<CR>
nnoremap <Leader>fp :Autopep8<CR>
nnoremap <Leader>m :set modifiable!<CR>
nnoremap <Leader>n :SimplenoteList 
nnoremap <Leader>o :on<CR>
nnoremap <Leader>p :FZF<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>qq :q!<CR>
nnoremap <Leader>r :set readonly!<CR>
nnoremap <Leader>s :source ~/.vimrc<CR>
nnoremap <Leader>v :e ~/.vimrc<CR>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>z :Z 
nnoremap <silent> <Leader>d :Pydocstring<CR>
nnoremap <Leader>c :let @+=expand('%:p')<CR>

" vim test
nmap <silent> <Leader>tn :TestNearest<CR>
nmap <silent> <Leader>tf :TestFile<CR>
nmap <silent> <Leader>ts :TestSuite<CR>
nmap <silent> <Leader>tl :TestLast<CR>
nmap <silent> <Leader>tg :TestVisit<CR>


let g:test#python#pytest#options = '-xv'

imap jj <Esc>

nmap <C-n> :cn<CR>
nmap <C-b> :cp<CR>

" Long lines
set nowrap

" Appearance
syntax on
set guifont=Mononoki-Regular:h13
set number
hi cursorline cterm=NONE ctermbg=blue ctermfg=white guibg=blue guifg=white
set cursorline
hi cursorcolumn cterm=NONE ctermbg=blue ctermfg=white guibg=blue guifg=white
set cursorcolumn
colorscheme deus
hi Search guibg=LightBlue
match ErrorMsg '\%>99v.\+'

" Whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Python specific
let python_highlight_all = 1

" Ag
let g:ackprg = 'rg --smart-case --ignore-file ~/.git/common-exclusions --column'

" CtrlP
"let g:ctrlp_map = '<c-p>'
"let g:ctrlp_cmd = 'CtrlPMixed'
"let g:ctrlp_working_path_mode = 'ra'
"let g:ctrlp_root_markers = ['.working']
"let g:ctrlp_user_command = {
"  \ 'types': {
"    \ 1: ['.git', "cd %s && git ls-files --cached --exclude-standard --others | egrep '.sh$|.js$|.py$|.hs$|.txt$|.yml$|.json$|.jsx$|.ts$|.tsx|.yml$|.yaml$|Makefile|Dockerfile|.md$|.snap|.rb$|.scss$|.feature$|.slim$|.sass$|.exs$'"],
"    \ },
"  \ 'fallback': 'find %s -type f'
"  \ }
"let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:50,results:50'

" Pydoc
let g:pydoc_cmd = 'python -m pydoc'
let g:pydoc_open_cmd = 'vsplit'
let g:pydoc_use_drop=1

" Backups
set backupdir=~/.vim/backup/
set directory=~/.vim/swap/
set undodir=~/.vim/undo/

" Cwd management
" Use AutoCWDPrint to test this map
let g:autocwd_patternwd_pairs = [
  \['*.py', '*REPO*'],
  \['*.js', '*REPO*'],
  \['*', '*REPO*'],
\]

" Search
set ignorecase
set smartcase
set gdefault
set hlsearch

" Json pretty format
command! FormatJson %!python -m json.tool

" Folding
set foldlevelstart=20

" Tabs
set expandtab
set tabstop=2
set shiftwidth=2

" Autopep8
let g:autopep8_aggressive=2
let g:autopep8_indent_size=2
let g:autopep8_on_save=0
let g:autopep8_max_line_length=99
let g:autopep8_disable_show_diff=1

"let test#strategy = "iterm"
"augroup test
"  autocmd!
"  autocmd BufWrite * if test#exists() |
"    \   TestFile |
"    \ endif
"augroup END

" Simplenote
let g:SimplenoteUsername = "trehp2000@yahoo.com"
let g:SimplenoteToken = "93702f5c79664fac964b3af965926285"

" Syntax (Syntastic)
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

let g:ale_linters = {
\   'python': ['pylint', 'mypy'],
\   'javascript': ['eslint'],
\   'typescript': [],
\}
"let g:ale_python_flake8_options='--ignore=E111,E114,E121,E225,E402,E501'
let g:ale_python_flake8_options=''
let g:ale_python_mypy_options='--ignore-missing-imports'
let g:ale_fixers = {
\   'javascript': ['importjs', 'eslint', 'remove_trailing_lines', 'trim_whitespace']
\}
let g:ale_fix_on_save = 1

set rtp+=/usr/local/bin/fzf

set autoread

au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType python setlocal ts=2 sts=2 sw=2 expandtab

"set number relativenumber
"
"augroup numbertoggle
"  autocmd!
"  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
"  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
"augroup END


" Visible tabs
set listchars=tab:>-,trail:-
set list


" Scroll bars off
set guioptions=

" Statusline
set laststatus=2

" TODO put this in a perm place
hi cursorline ctermbg=blue guibg=blue
